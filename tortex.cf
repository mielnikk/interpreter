-- programs ------------------------------------------------

entrypoints Program ;

PProgram.   Program ::= [Init] ;

separator nonempty Init "" ;

PArg.       Arg ::= Ident ":" Type;

PArgVar.    Arg ::= "var" Ident ":" Type;

separator  Arg "," ;

IFnDef.     Init ::= "fun" Ident "(" [Arg] ")" ":" Type Block ;

IInit.      Init ::= "var" Ident ":" Type "=" Expr ";" ;

-- statements ----------------------------------------------

SBlock.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

SEmpty.     Stmt ::= ";" ;

SBStmt.     Stmt ::= Block ;

SInit.      Stmt ::= Init ;

SAss.       Stmt ::= Ident "=" Expr  ";" ;

SIncr.      Stmt ::= Ident "++"  ";" ;

SDecr.      Stmt ::= Ident "--"  ";" ;

SRet.       Stmt ::= "return" Expr ";" ;

SRetVoid.  Stmt ::= "return" ";" ;

SCond.      Stmt ::= "if" "(" Expr ")" Block  ;

SCondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

SWhile.    Stmt ::= "while" "(" Expr ")" Block ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

TInt.       Type ::= "Int" ;

TStr.       Type ::= "String" ;

TBool.      Type ::= "Boolean" ;

TVoid.      Type ::= "Void" ;

TRec.      Type ::= Ident ;

TFun.      Type ::= "(" [Type] ")" "->" Type;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "True" ;

ELitFalse. Expr6 ::= "False" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

ENeg.       Expr5 ::= "-" Expr6 ;

ENot.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

ELambda.   Expr ::= "lambda" "(" [Arg] ")" ":" Type "=>" Block ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;
