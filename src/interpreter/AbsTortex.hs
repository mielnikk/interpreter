-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language tortex.

module AbsTortex where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = PProgram [Init]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = PArg Ident Type | PArgVar Ident Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Init = IFnDef Ident [Arg] Type Block | IInit Ident Type Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Block = SBlock [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = SEmpty
    | SBStmt Block
    | SInit Init
    | SAss Ident Expr
    | SIncr Ident
    | SDecr Ident
    | SRet Expr
    | SRetVoid
    | SCond Expr Block
    | SCondElse Expr Block Block
    | SWhile Expr Block
    | SExp Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = TInt | TStr | TBool | TVoid | TRec Ident | TFun [Type] Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | EString String
    | ENeg Expr
    | ENot Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
    | ELambda [Arg] Type Block
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Times | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

